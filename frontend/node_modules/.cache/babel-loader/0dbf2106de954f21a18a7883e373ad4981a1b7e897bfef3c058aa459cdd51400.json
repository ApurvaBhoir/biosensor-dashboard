{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Appu\\\\Documents\\\\Appu Projects\\\\sensorapp\\\\biosensor-dashboard\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from 'react';\nimport mqtt from 'mqtt';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [data, setData] = useState('');\n  const [mode, setMode] = useState('pulse');\n  const [client, setClient] = useState(null);\n  const connectToBroker = useCallback(() => {\n    const options = {\n      username: 'Projektarbeit',\n      password: 'tanjiro',\n      protocol: 'wss',\n      clientId: 'mqttjs_' + Math.random().toString(16).substr(2, 8),\n      reconnectPeriod: 5000 // Reconnect every 5 seconds\n    };\n    console.log('Attempting to connect to MQTT broker...');\n    const mqttClient = mqtt.connect('wss://928f0f4820694d46aca084e5bf5b7e55.s1.eu.hivemq.cloud:8884/mqtt', options);\n    mqttClient.on('connect', () => {\n      console.log('Connected to MQTT broker');\n      setClient(mqttClient);\n\n      // Delay subscriptions to ensure connection is stable\n      setTimeout(() => {\n        mqttClient.subscribe('Daten', err => {\n          if (err) console.error('Error subscribing to Daten:', err);else console.log('Subscribed to Daten topic');\n        });\n        mqttClient.subscribe('Moduswechsel', err => {\n          if (err) console.error('Error subscribing to Moduswechsel:', err);else console.log('Subscribed to Moduswechsel topic');\n        });\n      }, 1000);\n    });\n    mqttClient.on('message', (topic, message) => {\n      const payload = message.toString();\n      console.log(`Received message on topic ${topic}:`, payload);\n      if (topic === 'Daten') {\n        console.log('Setting data:', payload);\n        setData(payload);\n      } else if (topic === 'Moduswechsel') {\n        const newMode = payload === '1' ? 'raw' : 'pulse';\n        console.log('Changing mode to:', newMode);\n        setMode(newMode);\n      }\n    });\n    mqttClient.on('error', error => {\n      console.error('MQTT client error:', error);\n    });\n    mqttClient.on('close', () => {\n      console.log('MQTT client connection closed');\n    });\n    return mqttClient;\n  }, []);\n  useEffect(() => {\n    const mqttClient = connectToBroker();\n    return () => {\n      console.log('Cleaning up MQTT client connection');\n      mqttClient.end();\n    };\n  }, [connectToBroker]);\n  const publishModeChange = useCallback(mode => {\n    console.log('Attempting to publish mode change:', mode);\n    if (client) {\n      client.publish('Moduswechsel', mode, err => {\n        if (err) console.error('Error publishing mode change:', err);else console.log('Mode change published successfully');\n      });\n    } else {\n      console.error('MQTT client not connected');\n    }\n  }, [client]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"MQTT Web App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => publishModeChange('1'),\n      children: \"Switch to Raw Data Mode\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => publishModeChange('0'),\n      children: \"Switch to Pulse Data Mode\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"dataDisplay\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Data:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"dataOutput\",\n        children: mode === 'pulse' ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Heart Rate: \", data.split(',')[0], \" bpm\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Blood Oxygen: \", data.split(',')[1], \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Raw Data: \", data]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"z82tuw9eMwqzvAC/OlEUzrL+6OE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","mqtt","jsxDEV","_jsxDEV","App","_s","data","setData","mode","setMode","client","setClient","connectToBroker","options","username","password","protocol","clientId","Math","random","toString","substr","reconnectPeriod","console","log","mqttClient","connect","on","setTimeout","subscribe","err","error","topic","message","payload","newMode","end","publishModeChange","publish","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","id","split","_c","$RefreshReg$"],"sources":["C:/Users/Appu/Documents/Appu Projects/sensorapp/biosensor-dashboard/src/App.js"],"sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport mqtt from 'mqtt';\n\nconst App = () => {\n  const [data, setData] = useState('');\n  const [mode, setMode] = useState('pulse');\n  const [client, setClient] = useState(null);\n\n  const connectToBroker = useCallback(() => {\n    const options = {\n      username: 'Projektarbeit',\n      password: 'tanjiro',\n      protocol: 'wss',\n      clientId: 'mqttjs_' + Math.random().toString(16).substr(2, 8),\n      reconnectPeriod: 5000, // Reconnect every 5 seconds\n    };\n\n    console.log('Attempting to connect to MQTT broker...');\n    const mqttClient = mqtt.connect('wss://928f0f4820694d46aca084e5bf5b7e55.s1.eu.hivemq.cloud:8884/mqtt', options);\n\n    mqttClient.on('connect', () => {\n      console.log('Connected to MQTT broker');\n      setClient(mqttClient);\n\n      // Delay subscriptions to ensure connection is stable\n      setTimeout(() => {\n        mqttClient.subscribe('Daten', (err) => {\n          if (err) console.error('Error subscribing to Daten:', err);\n          else console.log('Subscribed to Daten topic');\n        });\n        mqttClient.subscribe('Moduswechsel', (err) => {\n          if (err) console.error('Error subscribing to Moduswechsel:', err);\n          else console.log('Subscribed to Moduswechsel topic');\n        });\n      }, 1000);\n    });\n\n    mqttClient.on('message', (topic, message) => {\n      const payload = message.toString();\n      console.log(`Received message on topic ${topic}:`, payload);\n      \n      if (topic === 'Daten') {\n        console.log('Setting data:', payload);\n        setData(payload);\n      } else if (topic === 'Moduswechsel') {\n        const newMode = payload === '1' ? 'raw' : 'pulse';\n        console.log('Changing mode to:', newMode);\n        setMode(newMode);\n      }\n    });\n\n    mqttClient.on('error', (error) => {\n      console.error('MQTT client error:', error);\n    });\n\n    mqttClient.on('close', () => {\n      console.log('MQTT client connection closed');\n    });\n\n    return mqttClient;\n  }, []);\n\n  useEffect(() => {\n    const mqttClient = connectToBroker();\n\n    return () => {\n      console.log('Cleaning up MQTT client connection');\n      mqttClient.end();\n    };\n  }, [connectToBroker]);\n\n  const publishModeChange = useCallback((mode) => {\n    console.log('Attempting to publish mode change:', mode);\n    \n    if (client) {\n      client.publish('Moduswechsel', mode, (err) => {\n        if (err) console.error('Error publishing mode change:', err);\n        else console.log('Mode change published successfully');\n      });\n    } else {\n      console.error('MQTT client not connected');\n    }\n  }, [client]);\n\n  return (\n    <div>\n      <h1>MQTT Web App</h1>\n      <button onClick={() => publishModeChange('1')}>Switch to Raw Data Mode</button>\n      <button onClick={() => publishModeChange('0')}>Switch to Pulse Data Mode</button>\n\n      <div id=\"dataDisplay\">\n        <h2>Data:</h2>\n        <div id=\"dataOutput\">\n          {mode === 'pulse' ? (\n            <div>\n              <p>Heart Rate: {data.split(',')[0]} bpm</p>\n              <p>Blood Oxygen: {data.split(',')[1]}%</p>\n            </div>\n          ) : (\n            <p>Raw Data: {data}</p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}