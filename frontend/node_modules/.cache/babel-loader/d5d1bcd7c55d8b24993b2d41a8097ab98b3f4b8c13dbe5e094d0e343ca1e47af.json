{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Appu\\\\Documents\\\\Appu Projects\\\\sensorapp\\\\biosensor-dashboard\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback, useMemo } from 'react';\nimport mqtt from 'mqtt';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport './App.css'; // Ensure you import the CSS file\nimport { serialize, db } from \"./database.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MAX_DATA_POINTS = 50;\nserialize();\nconst App = () => {\n  _s();\n  const [client, setClient] = useState(null);\n  const [chartData, setChartData] = useState([]);\n  const [pulseFrequency, setPulseFrequency] = useState(1000); // 1 second default\n  const [rawFrequency, setRawFrequency] = useState(100); // 100 ms default\n  const [lastUpdateTime, setLastUpdateTime] = useState({\n    pulse: 0,\n    raw: 0\n  });\n  const [currentMode, setCurrentMode] = useState('pulse');\n  const [soundEnabled, setSoundEnabled] = useState(false);\n  const heartbeatSound = useMemo(() => new Audio('/heartbeat-sound-110bpm.mp3'), []); // Ensure the path to your sound file is correct\n\n  const connectToBroker = useCallback(() => {\n    const options = {\n      username: 'Projektarbeit',\n      password: 'tanjiro',\n      protocol: 'wss',\n      clientId: 'mqttjs_' + Math.random().toString(16).substr(2, 8),\n      reconnectPeriod: 5000\n    };\n    console.log('Attempting to connect to MQTT broker...');\n    const mqttClient = mqtt.connect('wss://928f0f4820694d46aca084e5bf5b7e55.s1.eu.hivemq.cloud:8884/mqtt', options);\n    mqttClient.on('connect', () => {\n      console.log('Connected to MQTT broker');\n      setClient(mqttClient);\n      setTimeout(() => {\n        mqttClient.subscribe('Daten', err => {\n          if (err) console.error('Error subscribing to Daten:', err);else console.log('Subscribed to Daten topic');\n        });\n        mqttClient.subscribe('Moduswechsel', err => {\n          if (err) console.error('Error subscribing to Moduswechsel:', err);else console.log('Subscribed to Moduswechsel topic');\n        });\n      }, 1000);\n    });\n    mqttClient.on('message', (topic, message) => {\n      const payload = message.toString();\n      console.log(`Received message on topic ${topic}:`, payload);\n      if (topic === 'Daten') {\n        updateChartData(payload);\n      } else if (topic === 'Moduswechsel') {\n        console.log('Mode change received:', payload);\n        setCurrentMode(payload === '1' ? 'raw' : 'pulse');\n        setChartData([]); // Reset chart data when mode changes\n        setLastUpdateTime({\n          pulse: 0,\n          raw: 0\n        });\n      }\n    });\n    mqttClient.on('error', error => {\n      console.error('MQTT client error:', error);\n    });\n    mqttClient.on('close', () => {\n      console.log('MQTT client connection closed');\n    });\n    return mqttClient;\n  }, []);\n  const updateChartData = useCallback(newData => {\n    const now = Date.now();\n    const mode = newData.includes('\\t') ? 'raw' : 'pulse';\n    const frequency = mode === 'pulse' ? pulseFrequency : rawFrequency;\n    if (now - lastUpdateTime[mode] < frequency) {\n      return; // Skip this update if it's too soon\n    }\n    setLastUpdateTime(prev => ({\n      ...prev,\n      [mode]: now\n    }));\n    setChartData(prevData => {\n      let newPoint = {\n        timestamp: now\n      };\n      if (mode === 'raw') {\n        const [value1, value2] = newData.split('\\t');\n        newPoint.rawValue1 = parseFloat(value1);\n        newPoint.rawValue2 = parseFloat(value2);\n      } else {\n        const [type, value] = newData.split(' ');\n        if (type === '1') {\n          newPoint.heartRate = parseFloat(value);\n          if (soundEnabled && currentMode === 'pulse') heartbeatSound.play();\n        } else if (type === '2') {\n          newPoint.bloodOxygen = parseFloat(value);\n        }\n      }\n      console.log('New data point added:', newPoint);\n      const updatedData = [...prevData, newPoint].slice(-MAX_DATA_POINTS);\n\n      // Send data to backend\n      fetch('http://localhost:5000/api/save-data', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newPoint)\n      }).then(response => response.json()).then(data => {\n        console.log('Data successfully saved to backend:', data);\n      }).catch(error => console.error('Error saving data:', error));\n      return updatedData;\n    });\n  }, [pulseFrequency, rawFrequency, lastUpdateTime, soundEnabled, heartbeatSound, currentMode]);\n  useEffect(() => {\n    const mqttClient = connectToBroker();\n    return () => {\n      console.log('Cleaning up MQTT client connection');\n      mqttClient.end();\n    };\n  }, [connectToBroker]);\n  const publishModeChange = useCallback(mode => {\n    console.log('Attempting to publish mode change:', mode);\n    if (client) {\n      client.publish('Moduswechsel', mode, err => {\n        if (err) console.error('Error publishing mode change:', err);else console.log('Mode change published successfully');\n        setChartData([]); // Reset chart data when mode changes\n      });\n    } else {\n      console.error('MQTT client not connected');\n    }\n  }, [client]);\n  const fetchData = useCallback(() => {\n    fetch('http://localhost:5000/api/get-data').then(response => response.json()).then(data => {\n      console.log('Data fetched from server:', data);\n      const {\n        heartRates,\n        oxygens,\n        rawData\n      } = data;\n      const combinedData = [...heartRates.map(entry => ({\n        timestamp: new Date(entry.timestamp).getTime(),\n        heartRate: entry.value\n      })), ...oxygens.map(entry => ({\n        timestamp: new Date(entry.timestamp).getTime(),\n        bloodOxygen: entry.value\n      })), ...rawData.map(entry => ({\n        timestamp: new Date(entry.timestamp).getTime(),\n        rawValue1: entry.value1,\n        rawValue2: entry.value2\n      }))].sort((a, b) => a.timestamp - b.timestamp);\n      setChartData(combinedData.slice(-MAX_DATA_POINTS));\n    }).catch(error => console.error('Error fetching data:', error));\n  }, []);\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n  const smoothChartData = useMemo(() => {\n    return chartData.map((point, index, array) => {\n      if (index === 0) return point;\n      const prevPoint = array[index - 1];\n      return {\n        ...point,\n        heartRate: point.heartRate || prevPoint.heartRate,\n        bloodOxygen: point.bloodOxygen || prevPoint.bloodOxygen,\n        rawValue1: point.rawValue1 || prevPoint.rawValue1,\n        rawValue2: point.rawValue2 || prevPoint.rawValue2\n      };\n    });\n  }, [chartData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"p-3 text-primary-emphasis bg-primary-subtle border border-primary-subtle rounded-3 text-center\",\n      children: \"MQTT Data Visualization\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => publishModeChange('1'),\n      children: \"Switch to Raw Data Mode\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => publishModeChange('0'),\n      children: \"Switch to Pulse Data Mode\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Pulse Data Frequency (ms):\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: pulseFrequency,\n          onChange: e => setPulseFrequency(Number(e.target.value)),\n          min: \"100\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Raw Data Frequency (ms):\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: rawFrequency,\n          onChange: e => setRawFrequency(Number(e.target.value)),\n          min: \"10\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Enable Heartbeat Sound:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: soundEnabled,\n          onChange: () => setSoundEnabled(!soundEnabled)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Current Mode: \", currentMode]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"dataDisplay\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Data Visualization:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: 400,\n        children: /*#__PURE__*/_jsxDEV(LineChart, {\n          data: smoothChartData,\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"timestamp\",\n            type: \"number\",\n            domain: ['auto', 'auto'],\n            tickFormatter: unixTime => new Date(unixTime).toLocaleTimeString(),\n            scale: \"time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n            yAxisId: \"left\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n            yAxisId: \"right\",\n            orientation: \"right\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            labelFormatter: value => new Date(value).toLocaleTimeString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            yAxisId: \"left\",\n            type: \"monotone\",\n            dataKey: \"heartRate\",\n            stroke: \"#8884d8\",\n            name: \"Heart Rate (bpm)\",\n            dot: false,\n            isAnimationActive: false,\n            connectNulls: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            yAxisId: \"right\",\n            type: \"monotone\",\n            dataKey: \"bloodOxygen\",\n            stroke: \"#82ca9d\",\n            name: \"Blood Oxygen (%)\",\n            dot: false,\n            isAnimationActive: false,\n            connectNulls: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            yAxisId: \"left\",\n            type: \"monotone\",\n            dataKey: \"rawValue1\",\n            stroke: \"#ff7300\",\n            name: \"Raw Value 1\",\n            dot: false,\n            isAnimationActive: false,\n            connectNulls: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            yAxisId: \"right\",\n            type: \"monotone\",\n            dataKey: \"rawValue2\",\n            stroke: \"#007bff\",\n            name: \"Raw Value 2\",\n            dot: false,\n            isAnimationActive: false,\n            connectNulls: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"b682vnwwIqcAxJwZqrKFis9aySY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","useMemo","mqtt","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","serialize","db","jsxDEV","_jsxDEV","MAX_DATA_POINTS","App","_s","client","setClient","chartData","setChartData","pulseFrequency","setPulseFrequency","rawFrequency","setRawFrequency","lastUpdateTime","setLastUpdateTime","pulse","raw","currentMode","setCurrentMode","soundEnabled","setSoundEnabled","heartbeatSound","Audio","connectToBroker","options","username","password","protocol","clientId","Math","random","toString","substr","reconnectPeriod","console","log","mqttClient","connect","on","setTimeout","subscribe","err","error","topic","message","payload","updateChartData","newData","now","Date","mode","includes","frequency","prev","prevData","newPoint","timestamp","value1","value2","split","rawValue1","parseFloat","rawValue2","type","value","heartRate","play","bloodOxygen","updatedData","slice","fetch","method","headers","body","JSON","stringify","then","response","json","data","catch","end","publishModeChange","publish","fetchData","heartRates","oxygens","rawData","combinedData","map","entry","getTime","sort","a","b","smoothChartData","point","index","array","prevPoint","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onChange","e","Number","target","min","checked","id","width","height","strokeDasharray","dataKey","domain","tickFormatter","unixTime","toLocaleTimeString","scale","yAxisId","orientation","labelFormatter","stroke","name","dot","isAnimationActive","connectNulls","_c","$RefreshReg$"],"sources":["C:/Users/Appu/Documents/Appu Projects/sensorapp/biosensor-dashboard/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState, useCallback, useMemo } from 'react';\nimport mqtt from 'mqtt';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport './App.css'; // Ensure you import the CSS file\nimport {serialize,db} from \"./database.js\";\n\nconst MAX_DATA_POINTS = 50;\n\nserialize();\n\nconst App = () => {\n  const [client, setClient] = useState(null);\n  const [chartData, setChartData] = useState([]);\n  const [pulseFrequency, setPulseFrequency] = useState(1000); // 1 second default\n  const [rawFrequency, setRawFrequency] = useState(100); // 100 ms default\n  const [lastUpdateTime, setLastUpdateTime] = useState({ pulse: 0, raw: 0 });\n  const [currentMode, setCurrentMode] = useState('pulse');\n  const [soundEnabled, setSoundEnabled] = useState(false);\n  const heartbeatSound = useMemo(() => new Audio('/heartbeat-sound-110bpm.mp3'), []); // Ensure the path to your sound file is correct\n\n  const connectToBroker = useCallback(() => {\n    const options = {\n      username: 'Projektarbeit',\n      password: 'tanjiro',\n      protocol: 'wss',\n      clientId: 'mqttjs_' + Math.random().toString(16).substr(2, 8),\n      reconnectPeriod: 5000,\n    };\n\n    console.log('Attempting to connect to MQTT broker...');\n    const mqttClient = mqtt.connect('wss://928f0f4820694d46aca084e5bf5b7e55.s1.eu.hivemq.cloud:8884/mqtt', options);\n\n    mqttClient.on('connect', () => {\n      console.log('Connected to MQTT broker');\n      setClient(mqttClient);\n\n      setTimeout(() => {\n        mqttClient.subscribe('Daten', (err) => {\n          if (err) console.error('Error subscribing to Daten:', err);\n          else console.log('Subscribed to Daten topic');\n        });\n        mqttClient.subscribe('Moduswechsel', (err) => {\n          if (err) console.error('Error subscribing to Moduswechsel:', err);\n          else console.log('Subscribed to Moduswechsel topic');\n        });\n      }, 1000);\n    });\n\n    mqttClient.on('message', (topic, message) => {\n      const payload = message.toString();\n      console.log(`Received message on topic ${topic}:`, payload);\n\n      if (topic === 'Daten') {\n        updateChartData(payload);\n      } else if (topic === 'Moduswechsel') {\n        console.log('Mode change received:', payload);\n        setCurrentMode(payload === '1' ? 'raw' : 'pulse');\n        setChartData([]); // Reset chart data when mode changes\n        setLastUpdateTime({ pulse: 0, raw: 0 });\n      }\n    });\n\n    mqttClient.on('error', (error) => {\n      console.error('MQTT client error:', error);\n    });\n\n    mqttClient.on('close', () => {\n      console.log('MQTT client connection closed');\n    });\n\n    return mqttClient;\n  }, []);\n\n  const updateChartData = useCallback((newData) => {\n    const now = Date.now();\n    const mode = newData.includes('\\t') ? 'raw' : 'pulse';\n    const frequency = mode === 'pulse' ? pulseFrequency : rawFrequency;\n\n    if (now - lastUpdateTime[mode] < frequency) {\n      return; // Skip this update if it's too soon\n    }\n\n    setLastUpdateTime(prev => ({ ...prev, [mode]: now }));\n\n    setChartData(prevData => {\n      let newPoint = { timestamp: now };\n\n      if (mode === 'raw') {\n        const [value1, value2] = newData.split('\\t');\n        newPoint.rawValue1 = parseFloat(value1);\n        newPoint.rawValue2 = parseFloat(value2);\n      } else {\n        const [type, value] = newData.split(' ');\n        if (type === '1') {\n          newPoint.heartRate = parseFloat(value);\n          if (soundEnabled && currentMode === 'pulse') heartbeatSound.play();\n        } else if (type === '2') {\n          newPoint.bloodOxygen = parseFloat(value);\n        }\n      }\n\n      console.log('New data point added:', newPoint);\n      const updatedData = [...prevData, newPoint].slice(-MAX_DATA_POINTS);\n\n      // Send data to backend\n      fetch('http://localhost:5000/api/save-data', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(newPoint),\n      })\n      .then(response => response.json())\n      .then(data => {\n        console.log('Data successfully saved to backend:', data);\n      })\n      .catch(error => console.error('Error saving data:', error));\n\n      return updatedData;\n    });\n  }, [pulseFrequency, rawFrequency, lastUpdateTime, soundEnabled, heartbeatSound, currentMode]);\n\n  useEffect(() => {\n    const mqttClient = connectToBroker();\n\n    return () => {\n      console.log('Cleaning up MQTT client connection');\n      mqttClient.end();\n    };\n  }, [connectToBroker]);\n\n  const publishModeChange = useCallback((mode) => {\n    console.log('Attempting to publish mode change:', mode);\n\n    if (client) {\n      client.publish('Moduswechsel', mode, (err) => {\n        if (err) console.error('Error publishing mode change:', err);\n        else console.log('Mode change published successfully');\n        setChartData([]); // Reset chart data when mode changes\n      });\n    } else {\n      console.error('MQTT client not connected');\n    }\n  }, [client]);\n\n  const fetchData = useCallback(() => {\n    fetch('http://localhost:5000/api/get-data')\n      .then(response => response.json())\n      .then(data => {\n        console.log('Data fetched from server:', data);\n        const { heartRates, oxygens, rawData } = data;\n        const combinedData = [\n          ...heartRates.map(entry => ({ timestamp: new Date(entry.timestamp).getTime(), heartRate: entry.value })),\n          ...oxygens.map(entry => ({ timestamp: new Date(entry.timestamp).getTime(), bloodOxygen: entry.value })),\n          ...rawData.map(entry => ({ timestamp: new Date(entry.timestamp).getTime(), rawValue1: entry.value1, rawValue2: entry.value2 }))\n        ].sort((a, b) => a.timestamp - b.timestamp);\n\n        setChartData(combinedData.slice(-MAX_DATA_POINTS));\n      })\n      .catch(error => console.error('Error fetching data:', error));\n  }, []);\n\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  const smoothChartData = useMemo(() => {\n    return chartData.map((point, index, array) => {\n      if (index === 0) return point;\n      const prevPoint = array[index - 1];\n      return {\n        ...point,\n        heartRate: point.heartRate || prevPoint.heartRate,\n        bloodOxygen: point.bloodOxygen || prevPoint.bloodOxygen,\n        rawValue1: point.rawValue1 || prevPoint.rawValue1,\n        rawValue2: point.rawValue2 || prevPoint.rawValue2,\n      };\n    });\n  }, [chartData]);\n\n  return (\n    <div>\n      <h1 className=\"p-3 text-primary-emphasis bg-primary-subtle border border-primary-subtle rounded-3 text-center\">\n        MQTT Data Visualization\n      </h1>\n      <button onClick={() => publishModeChange('1')}>Switch to Raw Data Mode</button>\n      <button onClick={() => publishModeChange('0')}>Switch to Pulse Data Mode</button>\n      <div>\n        <label>\n          Pulse Data Frequency (ms):\n          <input \n            type=\"number\" \n            value={pulseFrequency} \n            onChange={(e) => setPulseFrequency(Number(e.target.value))}\n            min=\"100\"\n          />\n        </label>\n      </div>\n      <div>\n        <label>\n          Raw Data Frequency (ms):\n          <input \n            type=\"number\" \n            value={rawFrequency} \n            onChange={(e) => setRawFrequency(Number(e.target.value))}\n            min=\"10\"\n          />\n        </label>\n      </div>\n      <div>\n        <label>\n          Enable Heartbeat Sound:\n          <input \n            type=\"checkbox\" \n            checked={soundEnabled} \n            onChange={() => setSoundEnabled(!soundEnabled)}\n          />\n        </label>\n      </div>\n      <div>Current Mode: {currentMode}</div>\n      <div id=\"dataDisplay\">\n        <h2>Data Visualization:</h2>\n        <ResponsiveContainer width=\"100%\" height={400}>\n          <LineChart data={smoothChartData}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis \n              dataKey=\"timestamp\" \n              type=\"number\" \n              domain={['auto', 'auto']} \n              tickFormatter={(unixTime) => new Date(unixTime).toLocaleTimeString()} \n              scale=\"time\"\n            />\n            <YAxis yAxisId=\"left\" />\n            <YAxis yAxisId=\"right\" orientation=\"right\" />\n            <Tooltip labelFormatter={(value) => new Date(value).toLocaleTimeString()} />\n            <Legend />\n            <Line \n              yAxisId=\"left\" \n              type=\"monotone\" \n              dataKey=\"heartRate\" \n              stroke=\"#8884d8\" \n              name=\"Heart Rate (bpm)\" \n              dot={false} \n              isAnimationActive={false}\n              connectNulls={true}\n            />\n            <Line \n              yAxisId=\"right\" \n              type=\"monotone\" \n              dataKey=\"bloodOxygen\" \n              stroke=\"#82ca9d\" \n              name=\"Blood Oxygen (%)\" \n              dot={false} \n              isAnimationActive={false}\n              connectNulls={true}\n            />\n            <Line \n              yAxisId=\"left\" \n              type=\"monotone\" \n              dataKey=\"rawValue1\" \n              stroke=\"#ff7300\" \n              name=\"Raw Value 1\" \n              dot={false} \n              isAnimationActive={false}\n              connectNulls={true}\n            />\n            <Line \n              yAxisId=\"right\" \n              type=\"monotone\" \n              dataKey=\"rawValue2\" \n              stroke=\"#007bff\" \n              name=\"Raw Value 2\" \n              dot={false} \n              isAnimationActive={false}\n              connectNulls={true}\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}