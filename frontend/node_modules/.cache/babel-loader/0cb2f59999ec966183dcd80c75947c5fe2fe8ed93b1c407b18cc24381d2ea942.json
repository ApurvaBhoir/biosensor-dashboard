{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Appu\\\\Documents\\\\Appu Projects\\\\sensorapp\\\\biosensor-dashboard\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport mqtt from 'mqtt';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [data, setData] = useState('');\n  const [mode, setMode] = useState('pulse');\n  useEffect(() => {\n    const options = {\n      username: 'Projektarbeit',\n      password: 'tanjiro',\n      protocol: 'wss',\n      clientId: 'mqttjs_' + Math.random().toString(16).substr(2, 8)\n    };\n    console.log('Attempting to connect to MQTT broker...');\n    const client = mqtt.connect('wss://928f0f4820694d46aca084e5bf5b7e55.s1.eu.hivemq.cloud:8884/mqtt', options);\n    client.on('connect', () => {\n      console.log('Connected to MQTT broker');\n      client.subscribe('Daten', err => {\n        if (err) console.error('Error subscribing to Daten:', err);else console.log('Subscribed to Daten topic');\n      });\n      client.subscribe('Moduswechsel', err => {\n        if (err) console.error('Error subscribing to Moduswechsel:', err);else console.log('Subscribed to Moduswechsel topic');\n      });\n    });\n    client.on('message', (topic, message) => {\n      const payload = message.toString();\n      console.log(`Received message on topic ${topic}:`, payload);\n      if (topic === 'Daten') {\n        console.log('Setting data:', payload);\n        setData(payload);\n      } else if (topic === 'Moduswechsel') {\n        const newMode = payload === '1' ? 'raw' : 'pulse';\n        console.log('Changing mode to:', newMode);\n        setMode(newMode);\n      }\n    });\n    client.on('error', error => {\n      console.error('MQTT client error:', error);\n    });\n    client.on('close', () => {\n      console.log('MQTT client connection closed');\n    });\n    return () => {\n      console.log('Cleaning up MQTT client connection');\n      client.end();\n    };\n  }, []);\n  const publishModeChange = mode => {\n    console.log('Attempting to publish mode change:', mode);\n    const options = {\n      username: 'Projektarbeit',\n      password: 'tanjiro',\n      protocol: 'wss',\n      clientId: 'mqttjs_' + Math.random().toString(16).substr(2, 8)\n    };\n    const client = mqtt.connect('wss://928f0f4820694d46aca084e5bf5b7e55.s1.eu.hivemq.cloud:8884/mqtt', options);\n    client.on('connect', () => {\n      console.log('Connected for publishing mode change');\n      client.publish('Moduswechsel', mode, err => {\n        if (err) console.error('Error publishing mode change:', err);else console.log('Mode change published successfully');\n        client.end();\n      });\n    });\n    client.on('error', error => {\n      console.error('Error in publish client:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"MQTT Web App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => publishModeChange('1'),\n      children: \"Switch to Raw Data Mode\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => publishModeChange('0'),\n      children: \"Switch to Pulse Data Mode\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"dataDisplay\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Data:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"dataOutput\",\n        children: mode === 'pulse' ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Heart Rate: \", data.split(',')[0], \" bpm\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Blood Oxygen: \", data.split(',')[1], \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Raw Data: \", data]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"s/Dyi1iRMWQIHGUqIEEgtLNsh3Y=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","mqtt","jsxDEV","_jsxDEV","App","_s","data","setData","mode","setMode","options","username","password","protocol","clientId","Math","random","toString","substr","console","log","client","connect","on","subscribe","err","error","topic","message","payload","newMode","end","publishModeChange","publish","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","id","split","_c","$RefreshReg$"],"sources":["C:/Users/Appu/Documents/Appu Projects/sensorapp/biosensor-dashboard/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport mqtt from 'mqtt';\n\nconst App = () => {\n  const [data, setData] = useState('');\n  const [mode, setMode] = useState('pulse');\n\n  useEffect(() => {\n    const options = {\n      username: 'Projektarbeit',\n      password: 'tanjiro',\n      protocol: 'wss',\n      clientId: 'mqttjs_' + Math.random().toString(16).substr(2, 8)\n    };\n\n    console.log('Attempting to connect to MQTT broker...');\n    const client = mqtt.connect('wss://928f0f4820694d46aca084e5bf5b7e55.s1.eu.hivemq.cloud:8884/mqtt', options);\n\n    client.on('connect', () => {\n      console.log('Connected to MQTT broker');\n      client.subscribe('Daten', (err) => {\n        if (err) console.error('Error subscribing to Daten:', err);\n        else console.log('Subscribed to Daten topic');\n      });\n      client.subscribe('Moduswechsel', (err) => {\n        if (err) console.error('Error subscribing to Moduswechsel:', err);\n        else console.log('Subscribed to Moduswechsel topic');\n      });\n    });\n\n    client.on('message', (topic, message) => {\n      const payload = message.toString();\n      console.log(`Received message on topic ${topic}:`, payload);\n      \n      if (topic === 'Daten') {\n        console.log('Setting data:', payload);\n        setData(payload);\n      } else if (topic === 'Moduswechsel') {\n        const newMode = payload === '1' ? 'raw' : 'pulse';\n        console.log('Changing mode to:', newMode);\n        setMode(newMode);\n      }\n    });\n\n    client.on('error', (error) => {\n      console.error('MQTT client error:', error);\n    });\n\n    client.on('close', () => {\n      console.log('MQTT client connection closed');\n    });\n\n    return () => {\n      console.log('Cleaning up MQTT client connection');\n      client.end();\n    };\n  }, []);\n\n  const publishModeChange = (mode) => {\n    console.log('Attempting to publish mode change:', mode);\n    \n    const options = {\n      username: 'Projektarbeit',\n      password: 'tanjiro',\n      protocol: 'wss',\n      clientId: 'mqttjs_' + Math.random().toString(16).substr(2, 8)\n    };\n    \n    const client = mqtt.connect('wss://928f0f4820694d46aca084e5bf5b7e55.s1.eu.hivemq.cloud:8884/mqtt', options);\n    \n    client.on('connect', () => {\n      console.log('Connected for publishing mode change');\n      client.publish('Moduswechsel', mode, (err) => {\n        if (err) console.error('Error publishing mode change:', err);\n        else console.log('Mode change published successfully');\n        client.end();\n      });\n    });\n\n    client.on('error', (error) => {\n      console.error('Error in publish client:', error);\n    });\n  };\n\n  return (\n    <div>\n      <h1>MQTT Web App</h1>\n      <button onClick={() => publishModeChange('1')}>Switch to Raw Data Mode</button>\n      <button onClick={() => publishModeChange('0')}>Switch to Pulse Data Mode</button>\n\n      <div id=\"dataDisplay\">\n        <h2>Data:</h2>\n        <div id=\"dataOutput\">\n          {mode === 'pulse' ? (\n            <div>\n              <p>Heart Rate: {data.split(',')[0]} bpm</p>\n              <p>Blood Oxygen: {data.split(',')[1]}%</p>\n            </div>\n          ) : (\n            <p>Raw Data: {data}</p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}